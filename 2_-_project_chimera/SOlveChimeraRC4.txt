# reproduce_decrypt.py
from arc4 import ARC4   # or use the inline RC4 implementation below
LEAD_RESEARCHER_SIGNATURE = b"m\x1b@I\x1dAoe@\x07ZF[BL\rN\n\x0cS"
ENCRYPTED_CHIMERA_FORMULA = (
    b'r2b-\r\x9e\xf2\x1fp\x185\x82\xcf\xfc\x90\x14\xf1O\xad#]\xf3\xe2\xc0L\xd0\xc1e\x0c\xea\xec\xae\x11b\xa7\x8c\xaa!\xa1\x9d\xc2\x90'
)

# recovered username (derived by XORing signature with (i+42))
recovered_user = b'G0ld3n_Tr4nsmut4t10n'

# using arc4 library:
arc4 = ARC4(recovered_user)
print(arc4.decrypt(ENCRYPTED_CHIMERA_FORMULA).decode())

# -- or using a small RC4 implementation if you don't have arc4 installed:
def rc4(key, data):
    S = list(range(256))
    j = 0
    keylen = len(key)
    for i in range(256):
        j = (j + S[i] + key[i % keylen]) & 0xFF
        S[i], S[j] = S[j], S[i]
    i = j = 0
    out = bytearray()
    for b in data:
        i = (i + 1) & 0xFF
        j = (j + S[i]) & 0xFF
        S[i], S[j] = S[j], S[i]
        K = S[(S[i] + S[j]) & 0xFF]
        out.append(b ^ K)
    return bytes(out)

print(rc4(recovered_user, ENCRYPTED_CHIMERA_FORMULA).decode())
